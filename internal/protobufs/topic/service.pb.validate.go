// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/protobufs/topic/service.proto

package topic

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetTopicByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopicByIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Accesstoken

	// no validation rules for Mdrender

	return nil
}

// GetTopicByIdRequestValidationError is the validation error returned by
// GetTopicByIdRequest.Validate if the designated constraints aren't met.
type GetTopicByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicByIdRequestValidationError) ErrorName() string {
	return "GetTopicByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopicByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicByIdRequestValidationError{}

// Validate checks the field values on GetTopicByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopicByIdResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTopicByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	return nil
}

// GetTopicByIdResponseValidationError is the validation error returned by
// GetTopicByIdResponse.Validate if the designated constraints aren't met.
type GetTopicByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicByIdResponseValidationError) ErrorName() string {
	return "GetTopicByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopicByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicByIdResponseValidationError{}

// Validate checks the field values on GetTopicsByPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopicsByPageRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Tab

	// no validation rules for Mdrender

	return nil
}

// GetTopicsByPageRequestValidationError is the validation error returned by
// GetTopicsByPageRequest.Validate if the designated constraints aren't met.
type GetTopicsByPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicsByPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicsByPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicsByPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicsByPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicsByPageRequestValidationError) ErrorName() string {
	return "GetTopicsByPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopicsByPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicsByPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicsByPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicsByPageRequestValidationError{}

// Validate checks the field values on GetTopicsByPageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopicsByPageResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopicsByPageResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Success

	return nil
}

// GetTopicsByPageResponseValidationError is the validation error returned by
// GetTopicsByPageResponse.Validate if the designated constraints aren't met.
type GetTopicsByPageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicsByPageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicsByPageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicsByPageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicsByPageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicsByPageResponseValidationError) ErrorName() string {
	return "GetTopicsByPageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopicsByPageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicsByPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicsByPageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicsByPageResponseValidationError{}
